
use sdl2::keyboard::{Keycode, Mod};
use common::generated::KeyCode;

//hi. cool!
pub fn sdl_to_common(kc: Keycode, keymod: Mod) -> KeyCode {
    // println!("converting SDL {}",kc);
    let code = match kc {
        Keycode::A => KeyCode::LETTER_A,
        Keycode::B => KeyCode::LETTER_B,
        Keycode::C => KeyCode::LETTER_C,
        Keycode::D => KeyCode::LETTER_D,
        Keycode::E => KeyCode::LETTER_E,
        Keycode::F => KeyCode::LETTER_F,
        Keycode::G => KeyCode::LETTER_G,
        Keycode::H => KeyCode::LETTER_H,
        Keycode::I => KeyCode::LETTER_I,
        Keycode::J => KeyCode::LETTER_J,
        Keycode::K => KeyCode::LETTER_K,
        Keycode::L => KeyCode::LETTER_L,
        Keycode::M => KeyCode::LETTER_M,
        Keycode::N => KeyCode::LETTER_N,
        Keycode::O => KeyCode::LETTER_O,
        Keycode::P => KeyCode::LETTER_P,
        Keycode::Q => KeyCode::LETTER_Q,
        Keycode::R => KeyCode::LETTER_R,
        Keycode::S => KeyCode::LETTER_S,
        Keycode::T => KeyCode::LETTER_T,
        Keycode::U => KeyCode::LETTER_U,
        Keycode::V => KeyCode::LETTER_V,
        Keycode::W => KeyCode::LETTER_W,
        Keycode::X => KeyCode::LETTER_X,
        Keycode::Y => KeyCode::LETTER_Y,
        Keycode::Z => KeyCode::LETTER_Z,
        Keycode::Num0 => KeyCode::DIGIT_0,
        Keycode::Num1 => KeyCode::DIGIT_1,
        Keycode::Num2 => KeyCode::DIGIT_2,
        Keycode::Num3 => KeyCode::DIGIT_3,
        Keycode::Num4 => KeyCode::DIGIT_4,
        Keycode::Num5 => KeyCode::DIGIT_5,
        Keycode::Num6 => KeyCode::DIGIT_6,
        Keycode::Num7 => KeyCode::DIGIT_7,
        Keycode::Num8 => KeyCode::DIGIT_8,
        Keycode::Num9 => KeyCode::DIGIT_9,
        Keycode::Left => KeyCode::ARROW_LEFT,
        Keycode::Right => KeyCode::ARROW_RIGHT,
        Keycode::Up => KeyCode::ARROW_UP,
        Keycode::Down => KeyCode::ARROW_DOWN,
        Keycode::LShift => KeyCode::SHIFT_LEFT,
        Keycode::RShift => KeyCode::SHIFT_RIGHT,
        Keycode::LCtrl => KeyCode::CONTROL_LEFT,
        Keycode::RCtrl => KeyCode::CONTROL_RIGHT,
        Keycode::LAlt => KeyCode::ALT_LEFT,
        Keycode::RAlt => KeyCode::ALT_RIGHT,
        Keycode::LGui => KeyCode::META_LEFT,
        Keycode::RGui => KeyCode::META_RIGHT,
        Keycode::Backspace => KeyCode::BACKSPACE,
        Keycode::Delete => KeyCode::DELETE,
        Keycode::Return => KeyCode::ENTER,
        Keycode::Escape => KeyCode::ESCAPE,
        Keycode::Tab => KeyCode::TAB,
        Keycode::Comma => KeyCode::COMMA,
        Keycode::Less => KeyCode::LESS_THAN,
        Keycode::Period => KeyCode::PERIOD,
        Keycode::Greater => KeyCode::GREATER_THAN,
        Keycode::Slash => KeyCode::SLASH,
        Keycode::Question => KeyCode::QUESTION,
        Keycode::Semicolon => KeyCode::SEMICOLON,
        Keycode::Colon => KeyCode::COLON,
        Keycode::Quote => KeyCode::QUOTE,
        Keycode::Quotedbl => KeyCode::DOUBLE_QUOTE,
        Keycode::Backquote => KeyCode::BACKQUOTE,
        Keycode::Exclaim => KeyCode::EXCLAIM,
        Keycode::At => KeyCode::AT,
        Keycode::Hash => KeyCode::HASH,
        Keycode::Dollar => KeyCode::DOLLAR,
        Keycode::Percent => KeyCode::PERCENT,
        Keycode::Caret => KeyCode::CARET,
        Keycode::Ampersand => KeyCode::AMPERSAND,
        Keycode::Asterisk => KeyCode::ASTERISK,
        Keycode::LeftParen => KeyCode::LEFT_PAREN,
        Keycode::RightParen => KeyCode::RIGHT_PAREN,
        Keycode::Underscore => KeyCode::UNDERSCORE,
        Keycode::Plus => KeyCode::PLUS,
        Keycode::LeftBracket => KeyCode::BRACKET_LEFT,
        Keycode::RightBracket => KeyCode::BRACKET_RIGHT,
        Keycode::KpLeftBrace => KeyCode::BRACE_LEFT,
        Keycode::KpRightBrace => KeyCode::BRACE_RIGHT,
        Keycode::Backslash => KeyCode::BACKSLASH,
        Keycode::KpVerticalBar => KeyCode::PIPE,
        Keycode::Minus => KeyCode::MINUS,
        Keycode::Equals => KeyCode::EQUALS,
        Keycode::Space => KeyCode::SPACE,
        _ => {
            KeyCode::UNKNOWN
        }
    };
    // println!("to code {:?}",code);
    code
}
pub fn sdl_to_common_letter(kc: Keycode, keymod: Mod) -> String {
    if keymod.contains(Mod::LSHIFTMOD) || keymod.contains(Mod::RSHIFTMOD) {
        match kc {
        Keycode::A => "A".to_string(),
        Keycode::B => "B".to_string(),
        Keycode::C => "C".to_string(),
        Keycode::D => "D".to_string(),
        Keycode::E => "E".to_string(),
        Keycode::F => "F".to_string(),
        Keycode::G => "G".to_string(),
        Keycode::H => "H".to_string(),
        Keycode::I => "I".to_string(),
        Keycode::J => "J".to_string(),
        Keycode::K => "K".to_string(),
        Keycode::L => "L".to_string(),
        Keycode::M => "M".to_string(),
        Keycode::N => "N".to_string(),
        Keycode::O => "O".to_string(),
        Keycode::P => "P".to_string(),
        Keycode::Q => "Q".to_string(),
        Keycode::R => "R".to_string(),
        Keycode::S => "S".to_string(),
        Keycode::T => "T".to_string(),
        Keycode::U => "U".to_string(),
        Keycode::V => "V".to_string(),
        Keycode::W => "W".to_string(),
        Keycode::X => "X".to_string(),
        Keycode::Y => "Y".to_string(),
        Keycode::Z => "Z".to_string(),
        Keycode::Num0 => ")".to_string(),
        Keycode::Num1 => "!".to_string(),
        Keycode::Num2 => "@".to_string(),
        Keycode::Num3 => "#".to_string(),
        Keycode::Num4 => "$".to_string(),
        Keycode::Num5 => "%".to_string(),
        Keycode::Num6 => "^".to_string(),
        Keycode::Num7 => "&".to_string(),
        Keycode::Num8 => "*".to_string(),
        Keycode::Num9 => "(".to_string(),
        Keycode::Comma => "<".to_string(),
        Keycode::Less => "<".to_string(),
        Keycode::Period => ">".to_string(),
        Keycode::Greater => ">".to_string(),
        Keycode::Slash => "?".to_string(),
        Keycode::Question => "?".to_string(),
        Keycode::Semicolon => ":".to_string(),
        Keycode::Colon => ":".to_string(),
        Keycode::Quote => "\"".to_string(),
        Keycode::Quotedbl => "\"".to_string(),
        Keycode::Backquote => "~".to_string(),
        Keycode::Exclaim => "!".to_string(),
        Keycode::At => "@".to_string(),
        Keycode::Hash => "#".to_string(),
        Keycode::Dollar => "$".to_string(),
        Keycode::Percent => "%".to_string(),
        Keycode::Caret => "^".to_string(),
        Keycode::Ampersand => "&".to_string(),
        Keycode::Asterisk => "*".to_string(),
        Keycode::LeftParen => "(".to_string(),
        Keycode::RightParen => ")".to_string(),
        Keycode::Underscore => "_".to_string(),
        Keycode::Plus => "+".to_string(),
        Keycode::LeftBracket => "{".to_string(),
        Keycode::RightBracket => "}".to_string(),
        Keycode::KpLeftBrace => "{".to_string(),
        Keycode::KpRightBrace => "}".to_string(),
        Keycode::Backslash => "|".to_string(),
        Keycode::KpVerticalBar => "|".to_string(),
        Keycode::Minus => "_".to_string(),
        Keycode::Equals => "+".to_string(),
        Keycode::Space => " ".to_string(),
        _ => "".to_string()
        }
    } else {
        match kc {
        Keycode::A => "a".to_string(),
        Keycode::B => "b".to_string(),
        Keycode::C => "c".to_string(),
        Keycode::D => "d".to_string(),
        Keycode::E => "e".to_string(),
        Keycode::F => "f".to_string(),
        Keycode::G => "g".to_string(),
        Keycode::H => "h".to_string(),
        Keycode::I => "i".to_string(),
        Keycode::J => "j".to_string(),
        Keycode::K => "k".to_string(),
        Keycode::L => "l".to_string(),
        Keycode::M => "m".to_string(),
        Keycode::N => "n".to_string(),
        Keycode::O => "o".to_string(),
        Keycode::P => "p".to_string(),
        Keycode::Q => "q".to_string(),
        Keycode::R => "r".to_string(),
        Keycode::S => "s".to_string(),
        Keycode::T => "t".to_string(),
        Keycode::U => "u".to_string(),
        Keycode::V => "v".to_string(),
        Keycode::W => "w".to_string(),
        Keycode::X => "x".to_string(),
        Keycode::Y => "y".to_string(),
        Keycode::Z => "z".to_string(),
        Keycode::Num0 => "0".to_string(),
        Keycode::Num1 => "1".to_string(),
        Keycode::Num2 => "2".to_string(),
        Keycode::Num3 => "3".to_string(),
        Keycode::Num4 => "4".to_string(),
        Keycode::Num5 => "5".to_string(),
        Keycode::Num6 => "6".to_string(),
        Keycode::Num7 => "7".to_string(),
        Keycode::Num8 => "8".to_string(),
        Keycode::Num9 => "9".to_string(),
        Keycode::Comma => ",".to_string(),
        Keycode::Less => "<".to_string(),
        Keycode::Period => ".".to_string(),
        Keycode::Greater => ">".to_string(),
        Keycode::Slash => "/".to_string(),
        Keycode::Question => "?".to_string(),
        Keycode::Semicolon => ";".to_string(),
        Keycode::Colon => ":".to_string(),
        Keycode::Quote => "\'".to_string(),
        Keycode::Quotedbl => "\"".to_string(),
        Keycode::Backquote => "`".to_string(),
        Keycode::Exclaim => "!".to_string(),
        Keycode::At => "@".to_string(),
        Keycode::Hash => "#".to_string(),
        Keycode::Dollar => "$".to_string(),
        Keycode::Percent => "%".to_string(),
        Keycode::Caret => "^".to_string(),
        Keycode::Ampersand => "&".to_string(),
        Keycode::Asterisk => "*".to_string(),
        Keycode::LeftParen => "(".to_string(),
        Keycode::RightParen => ")".to_string(),
        Keycode::Underscore => "_".to_string(),
        Keycode::Plus => "+".to_string(),
        Keycode::LeftBracket => "[".to_string(),
        Keycode::RightBracket => "]".to_string(),
        Keycode::KpLeftBrace => "{".to_string(),
        Keycode::KpRightBrace => "}".to_string(),
        Keycode::Backslash => "\\".to_string(),
        Keycode::KpVerticalBar => "|".to_string(),
        Keycode::Minus => "-".to_string(),
        Keycode::Equals => "=".to_string(),
        Keycode::Space => " ".to_string(),
            _ => "".to_string()
        }
    }
}
